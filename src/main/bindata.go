// Code generated by go-bindata.
// sources:
// db/migrations/20170807190804-create_users.sql
// db/migrations/20170807200750-create_accounts.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations20170807190804Create_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\xca\xc2\x30\x10\x84\xef\xfb\x14\x73\xfc\x7f\xb4\x4f\xd0\x93\x52\x6f\x82\x22\x7a\x96\xb5\x59\x25\x98\xa4\x61\xb3\x41\xfb\xf6\x52\x0a\x15\x6f\xc3\xf0\xcd\xf0\x51\xd3\x60\x15\xfd\x43\xd9\x04\x97\x4c\xbd\xca\x94\x8c\x6f\x41\x50\x8b\x68\xc1\x1f\x01\xde\xa1\x88\x7a\x0e\x48\x83\x21\xd5\x10\x90\xd5\x47\xd6\x11\x4f\x19\xd7\x04\x24\x8e\x02\x93\xb7\x2d\xc4\xd4\xce\x77\x0e\xe6\xa3\x14\xe3\x98\xbf\x7b\x27\x77\xae\xc1\xd0\x57\x55\x49\x76\x5d\x10\xfa\x6f\xe9\x47\xab\x1b\x5e\x89\xba\xd3\xe1\x88\xf3\x66\xbb\xdf\xcd\x5a\x2d\x7d\x02\x00\x00\xff\xff\x47\x04\x40\x12\xbb\x00\x00\x00")

func dbMigrations20170807190804Create_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20170807190804Create_usersSql,
		"db/migrations/20170807190804-create_users.sql",
	)
}

func dbMigrations20170807190804Create_usersSql() (*asset, error) {
	bytes, err := dbMigrations20170807190804Create_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20170807190804-create_users.sql", size: 187, mode: os.FileMode(420), modTime: time.Unix(1502093509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20170807200750Create_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\x43\x31\x10\x45\xf7\xf9\x8a\xbb\x6c\xd1\x7e\x41\x57\x4a\xdd\x09\x8a\xe8\xba\x8c\xc9\x6d\x19\x4c\xe6\x3d\x26\x13\xb4\x7f\x2f\x8f\xc2\x2b\xdd\x0d\xc3\x39\x70\x4f\xda\xed\xf0\xd0\xf4\xec\x12\xc4\xd7\x9c\xb2\x73\xb9\x42\xbe\x2b\x21\x39\x4f\xc3\xa2\x63\x93\x00\x2d\xe8\x74\x95\x0a\x9b\x02\x36\x6a\xc5\xec\xda\xc4\x2f\xf8\xe1\xe5\x31\x01\x26\x8d\x08\xfe\xc5\x4a\x2c\xdf\xd1\xe9\xfd\xa8\x05\x6a\xc1\x33\xfd\xa6\x3b\x4f\x74\x5a\x66\xbf\x42\xd8\x68\xd9\x2e\xca\x75\x44\x41\x68\x63\x0f\x69\xf3\xcd\x29\x3c\xc9\xa8\x81\x3c\xdc\x69\x71\x5c\x91\xb4\xdd\xa7\xbb\x98\xc3\xf4\x6b\xe9\xf0\xf1\xf6\x8e\xcf\xa7\xe7\xd7\x97\x35\x66\x9f\xfe\x03\x00\x00\xff\xff\xcc\x1f\x77\x7b\xf4\x00\x00\x00")

func dbMigrations20170807200750Create_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20170807200750Create_accountsSql,
		"db/migrations/20170807200750-create_accounts.sql",
	)
}

func dbMigrations20170807200750Create_accountsSql() (*asset, error) {
	bytes, err := dbMigrations20170807200750Create_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20170807200750-create_accounts.sql", size: 244, mode: os.FileMode(420), modTime: time.Unix(1502093727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/20170807190804-create_users.sql": dbMigrations20170807190804Create_usersSql,
	"db/migrations/20170807200750-create_accounts.sql": dbMigrations20170807200750Create_accountsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"20170807190804-create_users.sql": &bintree{dbMigrations20170807190804Create_usersSql, map[string]*bintree{}},
			"20170807200750-create_accounts.sql": &bintree{dbMigrations20170807200750Create_accountsSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

